package ru.gnaizel.service.telegram;

import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import ru.gnaizel.enums.AlertTepe;
import ru.gnaizel.model.Group;

import java.util.ArrayList;
import java.util.List;

@Slf4j
public class KeyboardFactory {

    public static ReplyKeyboardMarkup mainKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();
        KeyboardRow row1 = new KeyboardRow();
        KeyboardRow row2 = new KeyboardRow();

        row1.add("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ");
        row1.add("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π üìÖ");

        row2.add("–ü—Ä–æ—Ñ–∏–ª—å üôé‚Äç‚ôÇÔ∏è");

        rows.add(row1);
        rows.add(row2);

        keyboardMarkup.setKeyboard(rows);
        return keyboardMarkup;
    }

    public static InlineKeyboardMarkup korpusKeyboard() {
        InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        InlineKeyboardButton one = new InlineKeyboardButton("–ì–æ—Ä—å–∫–æ–≥–æ, 9");
        one.setCallbackData("oneKorpusButton");

        InlineKeyboardButton two = new InlineKeyboardButton("–ò–ª—å–∏–Ω—Å–∫–∞—è –ø–ª–æ—â–∞–¥—å, 4");
        two.setCallbackData("tooKorpusButton");

        InlineKeyboardButton three = new InlineKeyboardButton("–ö—Ä—ã–º—Å–∫–∞—è, 19");
        three.setCallbackData("threeKorpusButton");

        InlineKeyboardButton four = new InlineKeyboardButton("–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è, 24");
        four.setCallbackData("fourKorpusButton");

        InlineKeyboardButton five = new InlineKeyboardButton("–°–∞–∫–∫–æ –∏ –í–∞–Ω—Ü–µ—Ç—Ç–∏, 15");
        five.setCallbackData("fiveKorpusButton");

        InlineKeyboardButton six = new InlineKeyboardButton("–°–∞–∫–∫–æ –∏ –í–∞–Ω—Ü–µ—Ç—Ç–∏ (—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–Ω–∏–∫–∏)");
        six.setCallbackData("sixKorpusButton");

        rows.add(List.of(one, two));
        rows.add(List.of(three, four));
        rows.add(List.of(five, six));

        inlineKeyboard.setKeyboard(rows);
        return inlineKeyboard;
    }

    public static InlineKeyboardMarkup createModeratorApplicationKeyBord() {
        InlineKeyboardMarkup keyBoard = new InlineKeyboardMarkup();

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        InlineKeyboardButton approve = new InlineKeyboardButton();
        approve.setText("‚úÖ");
        approve.setCallbackData("approvedApplicationOfModeration");

        InlineKeyboardButton rejected = new InlineKeyboardButton();
        rejected.setText("‚ùå");
        rejected.setCallbackData("rejectedApplicationOfModeration");

        rows.add(List.of(approve, rejected));

        keyBoard.setKeyboard(rows);
        return keyBoard;
    }

    public static InlineKeyboardMarkup handleChoseTepeAlertApplication() {
        InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        InlineKeyboardButton groupButton = new InlineKeyboardButton();
        groupButton.setText("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –í –≥—Ä—É–ø–ø—É");
        groupButton.setCallbackData("sendAlertToGroup");

        InlineKeyboardButton groupMembersButton = new InlineKeyboardButton();
        groupMembersButton.setText("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã");
        groupMembersButton.setCallbackData("sendAlertToGroupMember");

        rows.add(List.of(groupButton));
        rows.add(List.of(groupMembersButton));

        inlineKeyboard.setKeyboard(rows);
        return inlineKeyboard;
    }

    public static InlineKeyboardMarkup handleAlertApplication(List<Group> groups, AlertTepe tepe) {
        InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (Group group : groups) {
            InlineKeyboardButton groupButton = new InlineKeyboardButton();
            groupButton.setText(group.getGroupTitle());
            groupButton.setCallbackData("setGroupButtonForAlert"
                    + (group.getChatId()) + "-" + tepe.toString());

            rows.add(List.of(groupButton));
        }

        inlineKeyboard.setKeyboard(rows);

        return inlineKeyboard;
    }

    public static InlineKeyboardMarkup handleGroupSettings(long groupId) { // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        InlineKeyboardButton alertGroupSettings = new InlineKeyboardButton();
        alertGroupSettings.setText("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π");
        alertGroupSettings.setCallbackData("alertGroupSettings" + (groupId));
        log.debug(alertGroupSettings.getCallbackData());


        rows.add(List.of(alertGroupSettings));

        inlineKeyboard.setKeyboard(rows);
        return inlineKeyboard;
    }

    public static InlineKeyboardMarkup handleAlertGroupSettings(long groupId) {
        InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        InlineKeyboardButton alertGroupSettingsEveryWeekSchedule = new InlineKeyboardButton();
        alertGroupSettingsEveryWeekSchedule.setText("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
        alertGroupSettingsEveryWeekSchedule.setCallbackData("alertGroupSettingsEveryWeekSchedule" + groupId);

        InlineKeyboardButton alertGroupSettingsEveryDaySchedule = new InlineKeyboardButton();
        alertGroupSettingsEveryDaySchedule.setText("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
        alertGroupSettingsEveryDaySchedule.setCallbackData("alertGroupSettingsEveryDaySchedule" + groupId);

        InlineKeyboardButton groupCohort = new InlineKeyboardButton();
        groupCohort.setText("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É (–ò–ò–ò-000)");
        groupCohort.setCallbackData("setGroupCohort" + groupId);

//        InlineKeyboardButton groupKorpus = new InlineKeyboardButton();
//        groupKorpus.setText("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—Ä–ø—É—Å");
//        groupKorpus.setCallbackData("setGroupKorpus" + groupId);

        rows.add(List.of(groupCohort));

        rows.add(List.of(alertGroupSettingsEveryWeekSchedule));
        rows.add(List.of(alertGroupSettingsEveryDaySchedule));

        inlineKeyboard.setKeyboard(rows);
        return inlineKeyboard;
    }

    public static InlineKeyboardMarkup handleGroupMenuForGroupSettings(List<Group> groups) {
        InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (Group group : groups) {
            InlineKeyboardButton groupButton = new InlineKeyboardButton();
            groupButton.setText(group.getGroupTitle());
            groupButton.setCallbackData("groupSettings"
                    + group.getChatId());
            log.debug(groupButton.getCallbackData());

            rows.add(List.of(groupButton));
        }

        inlineKeyboard.setKeyboard(rows);

        return inlineKeyboard;
    }

    public static InlineKeyboardMarkup handleSetCohortForGroup(long groupId) {
        InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        InlineKeyboardButton groupCohort = new InlineKeyboardButton();
        groupCohort.setText("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É (–ò–ò–ò-000)");
        groupCohort.setCallbackData("setGroupCohort" + groupId);

        InlineKeyboardButton groupKorpus = new InlineKeyboardButton();
        groupKorpus.setText("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—Ä–ø—É—Å");
        groupKorpus.setCallbackData("setGroupKorpus" + groupId);

        rows.add(List.of(groupCohort));
        rows.add(List.of(groupKorpus));

        inlineKeyboard.setKeyboard(rows);

        return inlineKeyboard;
    }

    public InlineKeyboardMarkup handleSubEditor() {
        InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        InlineKeyboardButton everyDay = new InlineKeyboardButton();
        everyDay.setText("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
        everyDay.setCallbackData("setScheduleSubDay");

        InlineKeyboardButton everyWeek = new InlineKeyboardButton();
        everyWeek.setText("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
        everyWeek.setCallbackData("setScheduleSubWeek");

        rows.add(List.of(everyDay));
        rows.add(List.of(everyWeek));

        inlineKeyboard.setKeyboard(rows);

        return inlineKeyboard;
    }

    public InlineKeyboardMarkup handleAlertLevelEditor() {
        InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        InlineKeyboardButton zero = new InlineKeyboardButton();
        zero.setText("–í—ã–∫–ª");
        zero.setCallbackData("setAlertLevelZero");

        InlineKeyboardButton two = new InlineKeyboardButton();
        two.setText("–í–∞–∂–Ω—ã–µ");
        two.setCallbackData("setAlertLevelTwo");

        InlineKeyboardButton three = new InlineKeyboardButton();
        three.setText("–í—Å–µ");
        three.setCallbackData("setAlertLevelThree");

        rows.add(List.of(zero));
        rows.add(List.of(two));
        rows.add(List.of(three));

        inlineKeyboard.setKeyboard(rows);

        return inlineKeyboard;
    }
}
